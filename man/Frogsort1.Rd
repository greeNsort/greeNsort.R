% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/greeNsort.R
\name{Frogsort1}
\alias{Frogsort1}
\title{\Sexpr[echo=FALSE, results=rd, stage=build]{{thisalgo <- 'Frog1'; greeNsort::algodb[thisalgo,'name']}}}
\usage{
Frogsort1(x, situation = c("insitu", "exsitu"), method = c("pointer", "index"))
}
\arguments{
\item{x}{a \code{\link{double}} vector to be sorted}

\item{situation}{"insitu" will only allocate buffer memory and use the existing RAM for sorting, "exsitu" will allocate completely fresh RAM for data and buffer}

\item{method}{an attempt to classify the implementation,  "index" means the implementation rather indexes into arrays, "pointer" rather uses pointer arithmetic}
}
\value{
like \code{\link{rawperf}}
}
\description{
\Sexpr[echo=FALSE, results=rd, stage=build]{gsub("(.*)(like )(.+)( but)(.*)","\\\\1like \\\\\\\\code{\\\\\\\\link{\\\\3} } but\\\\5",greeNsort::algodb[thisalgo,'desc'])}
}
\details{
\Sexpr[echo=FALSE, results=text, stage=build]{greeNsort::algodb[thisalgo,'expl']}

\Sexpr[echo=FALSE, results=verbatim, stage=build]{{i <- !colnames(greeNsort::algodb) \%in\% c('func','desc','expl'); cat(paste(colnames(greeNsort::algodb)[i], ' - ',  greeNsort::algodb[thisalgo,i], '\n', sep=''), sep='')}}

See \code{\link{algodb}} for the complete table of algorithms.
}
\examples{
n <- getOption("greensort_example_size")
x <- testdb$func$permut(n)
rbind(
 {y <- x[]; sperf(Knuthsort(y))}   # a p-merging with 100\\% buffer
,{y <- x[]; sperf(Omitsort(y))}    # a p-merging with 100\\% buffer tuned for adaptivity
,{y <- x[]; sperf(Ninisort(y))}    # a less general algorithm with 50\\% buffer
,{y <- x[]; sperf(Frogsort0(y))}   # the root version using triplets
,{y <- x[]; sperf(Geckosort1(y))}  # the version that is 25\\% bi-adaptive
,{y <- x[]; sperf(Frogsort1(y))}   # the basic balanced version
,{y <- x[]; sperf(Frogsort1A(y))}  # the balanced version tuned for adaptivity
,{y <- x[]; sperf(Frogsort1B(y))}  # the balanced version tuned to avoid branch-(mis)prediction
,{y <- x[]; sperf(Frogsort2(y))}   # the unbalanced version using F&M
,{y <- x[]; sperf(Frogsort3(y))}   # the unbalanced version using A&M
,{y <- x[]; sperf(Frogsort6(y))}   # a parametrized generalization of Frogsort1,2,3
,{y <- x[]; sperf(Frogsort4(y))}   # a bottom-up version starting with sqrt buffer then 50\% buffer
,{y <- x[]; sperf(Frogsort5(y))}   # a bottom-up version with optimized buffer size
,{y <- x[]; sperf(PFrogsort1(y))}  # a parallel version
)
x <- testdb$func$ascnorm(n)
rbind(
 {y <- x[]; sperf(Knuthsort(y))}   # a p-merging with 100\\% buffer
,{y <- x[]; sperf(Omitsort(y))}    # a p-merging with 100\\% buffer tuned for adaptivity
,{y <- x[]; sperf(Ninisort(y))}    # a less general algorithm with 50\\% buffer
,{y <- x[]; sperf(Geckosort1(y))}  # the version that is 25\\% bi-adaptive
,{y <- x[]; sperf(Frogsort1(y))}   # the basic balanced version
,{y <- x[]; sperf(Frogsort1A(y))}  # the unbalanced version tuned for adaptivity
,{y <- x[]; sperf(Squidsort1(y))}  # a version with adaptivity for presorted and reverse-sorted
)
}
\seealso{
\code{\link{Knuthsort}} for p-merging with 100\% buffer
\code{\link{Omitsort}} for a p-merging with 100\% buffer tuned for adaptivity
\code{\link{Ninisort}} for a less general algorithm with 50\% buffer
\code{\link{Geckosort1}} for the version that is 25\% bi-adaptive
\code{\link{Frogsort0}} for the root version using triplets
\code{\link{Frogsort1A}} for a version tuned with non-overlap testing for adaptivity on presorted data
\code{\link{Frogsort1B}} for a version tuned to avoid branch-(mis)prediction
\code{\link{Frogsort2}} for an unbalanced version using F&M requiring even less buffer and often even faster
\code{\link{Frogsort3}} for an unbalanced version using A&M requiring even less buffer
\code{\link{Frogsort6}} for a parametrized generalization of Frogsort1,2,3
\code{\link{Frogsort4}} for a bottom-up version starting with sqrt(N) buffer, finalizing with N/2 buffer
\code{\link{Frogsort5}} for a bottom-up version with optimized initial buffer size
\code{\link{Squidsort1}} for a version with adaptivity for presorted and reverse-sorted
\code{\link{VFrogsort1}} for a version that sorts strings (directly)
\code{\link{PFrogsort1}} for a parallel version
}
