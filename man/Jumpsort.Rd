% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/greeNsort.R
\name{Jumpsort}
\alias{Jumpsort}
\title{\Sexpr[echo=FALSE, results=rd, stage=build]{{thisalgo <- 'Jump'; greeNsort::algodb[thisalgo,'name']}}}
\usage{
Jumpsort(
  x,
  situation = c("insitu", "exsitu"),
  method = c("index"),
  p = sqrt(n)/n,
  b = max(1, round(p * n)),
  verbose = FALSE
)
}
\arguments{
\item{x}{a \code{\link{double}} vector to be sorted}

\item{situation}{"insitu" will only allocate buffer memory and use the existing RAM for sorting, "exsitu" will allocate completely fresh RAM for data and buffer}

\item{method}{an attempt to classify the implementation,  "index" means the implementation rather indexes into arrays, "pointer" rather uses pointer arithmetic}

\item{p}{fraction of buffer relative to data}

\item{b}{absolute buffer size}

\item{verbose}{TRUE reports buffer fraction p, absolute buffer size b and data size n}
}
\value{
like \code{\link{rawperf}}
}
\description{
\Sexpr[echo=FALSE, results=rd, stage=build]{gsub("(.*)(like )(.+)( but)(.*)","\\\\1like \\\\\\\\code{\\\\\\\\link{\\\\3} } but\\\\5",greeNsort::algodb[thisalgo,'desc'])}
}
\details{
\Sexpr[echo=FALSE, results=text, stage=build]{greeNsort::algodb[thisalgo,'expl']}

\Sexpr[echo=FALSE, results=verbatim, stage=build]{{i <- !colnames(greeNsort::algodb) \%in\% c('func','desc','expl'); cat(paste(colnames(greeNsort::algodb)[i], ' - ',  greeNsort::algodb[thisalgo,i], '\n', sep=''), sep='')}}

See \code{\link{algodb}} for the complete table of algorithms.
}
\examples{
n <- getOption("greensort_example_size")
x <- testdb$func$permut(n)
rbind(
 {y <- x[]; sperf(IMergesort(y))}
,{y <- x[]; sperf(Grailsort(y))}
,{y <- x[]; sperf(Grailsqrt(y))}
,{y <- x[]; sperf(Sqrtsort(y))}
,{y <- x[]; sperf(Walksort(y))}
,{y <- x[]; sperf(Jumpsort(y))}
,{y <- x[]; sperf(Frogsort4(y))}
,{y <- x[]; sperf(Frogsort5(y))}
,{y <- x[]; sperf(Frogsort6(y))}
)
x <- testdb$func$ascall(n)
rbind(
 {y <- x[]; sperf(IMergesort(y))}
,{y <- x[]; sperf(Grailsort(y))}
,{y <- x[]; sperf(Grailsqrt(y))}
,{y <- x[]; sperf(Sqrtsort(y))}
,{y <- x[]; sperf(Walksort(y))}
,{y <- x[]; sperf(Jumpsort(y))}
,{y <- x[]; sperf(Frogsort4(y))}
,{y <- x[]; sperf(Frogsort5(y))}
,{y <- x[]; sperf(Frogsort6(y))}
)
x <- testdb$func$descall(n)
rbind(
 {y <- x[]; sperf(IMergesort(y))}
,{y <- x[]; sperf(Grailsort(y))}
,{y <- x[]; sperf(Grailsqrt(y))}
,{y <- x[]; sperf(Sqrtsort(y))}
,{y <- x[]; sperf(Walksort(y))}
,{y <- x[]; sperf(Jumpsort(y))}
,{y <- x[]; sperf(Frogsort4(y))}
,{y <- x[]; sperf(Frogsort5(y))}
,{y <- x[]; sperf(Frogsort6(y))}
)
}
\seealso{
\code{\link{Walksort}} for a version without relocation moves
\code{\link{Walksort}} for the version without extra moves for distance-reduction
\code{\link{Frogsort4}} for a Frogsort using initially only \code{sqrt(N)} buffer and then finalizing merges with \code{N/2} buffer
\code{\link{Frogsort5}} for a Frogsort using initially ideal \code{\link{Frogbuf5}} buffer and then finalizing merges with \code{N/2} buffer
\code{\link{Frogsort6}} for an algorithm that can be parametrized for small buffer (6\%)
}
