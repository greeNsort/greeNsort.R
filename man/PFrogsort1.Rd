% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/greeNsort.R
\name{PFrogsort1}
\alias{PFrogsort1}
\title{\Sexpr[echo=FALSE, results=rd, stage=build]{{thisalgo <- 'PFrog1'; greeNsort::algodb[thisalgo,'name']}}}
\usage{
PFrogsort1(
  x,
  situation = c("insitu", "exsitu"),
  method = c("pointer"),
  threads = perfcores()
)
}
\arguments{
\item{x}{a \code{\link{double}} vector to be sorted}

\item{situation}{"insitu" will only allocate buffer memory and use the existing RAM for sorting, "exsitu" will allocate completely fresh RAM for data and buffer}

\item{method}{an attempt to classify the implementation,  "index" means the implementation rather indexes into arrays, "pointer" rather uses pointer arithmetic}

\item{threads}{the number of threads to use, default \code{\link{perfcores}}}
}
\value{
like \code{\link{rawperf}}
}
\description{
\Sexpr[echo=FALSE, results=rd, stage=build]{gsub("(.*)(like )(.+)( but)(.*)","\\\\1like \\\\\\\\code{\\\\\\\\link{\\\\3} } but\\\\5",greeNsort::algodb[thisalgo,'desc'])}
}
\details{
\Sexpr[echo=FALSE, results=text, stage=build]{greeNsort::algodb[thisalgo,'expl']}

\Sexpr[echo=FALSE, results=verbatim, stage=build]{{i <- !colnames(greeNsort::algodb) \%in\% c('func','desc','expl'); cat(paste(colnames(greeNsort::algodb)[i], ' - ',  greeNsort::algodb[thisalgo,i], '\n', sep=''), sep='')}}

See \code{\link{algodb}} for the complete table of algorithms.
}
\examples{
n <- getOption("greensort_example_size")
x <- testdb$func$permut(n)
rbind(
 {y <- x[]; sperf(Frogsort1(y))}
,{y <- x[]; sperf(PQuicksort2(y))}
,{y <- x[]; sperf(PQuicksort2B(y))}
,{y <- x[]; sperf(PDucksort(y))}
,{y <- x[]; sperf(PDucksortB(y))}
,{y <- x[]; sperf(PKnuthsort(y))}
,{y <- x[]; sperf(PFrogsort0(y))}
,{y <- x[]; sperf(PFrogsort1(y))}
,{y <- x[]; sperf(PFrogsort2(y))}
,{y <- x[]; sperf(PFrogsort3(y))}
)
x <- testdb$func$tielog2(n)
rbind(
 {y <- x[]; sperf(Frogsort1(y))}
,{y <- x[]; sperf(PQuicksort2(y))}
,{y <- x[]; sperf(PQuicksort2B(y))}
,{y <- x[]; sperf(PDucksort(y))}
,{y <- x[]; sperf(PDucksortB(y))}
,{y <- x[]; sperf(PKnuthsort(y))}
,{y <- x[]; sperf(PFrogsort0(y))}
,{y <- x[]; sperf(PFrogsort1(y))}
,{y <- x[]; sperf(PFrogsort2(y))}
,{y <- x[]; sperf(PFrogsort3(y))}
)
x <- testdb$func$ascnorm(n)
rbind(
 {y <- x[]; sperf(Frogsort1(y))}
,{y <- x[]; sperf(PQuicksort2(y))}
,{y <- x[]; sperf(PQuicksort2B(y))}
,{y <- x[]; sperf(PDucksort(y))}
,{y <- x[]; sperf(PDucksortB(y))}
,{y <- x[]; sperf(PKnuthsort(y))}
,{y <- x[]; sperf(PFrogsort0(y))}
,{y <- x[]; sperf(PFrogsort1(y))}
,{y <- x[]; sperf(PFrogsort2(y))}
,{y <- x[]; sperf(PFrogsort3(y))}
)
}
\seealso{
\code{\link{Frogsort1}} for the serial algorithm
\code{\link{PQuicksort2}} for a branch-parallel Quicksort
\code{\link{PQuicksort2}} for a branch-parallel block-tuned Quicksort
\code{\link{PDucksort}} for a branch-parallel Ducksort
\code{\link{PDucksort}} for a branch-parallel block-tuned Ducksort
\code{\link{PKnuthsort}} for a full-parallel Mergesort 100\% buffer
\code{\link{PFrogsort0}} for a full-parallel balanced F&M Frogsort 50\% buffer using triplet-setup
\code{\link{PFrogsort1}} for a full-parallel balanced F&M Frogsort 50\% buffer
\code{\link{PFrogsort2}} for a full-parallel balanced F&M Frogsort 14\% buffer
\code{\link{PFrogsort3}} for a full-parallel imbalanced A&M Frogsort 12\% buffer
}
