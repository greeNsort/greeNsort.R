% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/greeNsort.R
\name{symsearch}
\alias{symsearch}
\title{Symmetric search}
\usage{
symsearch(
  x,
  vec,
  cmp = c("WL", "L", "LT", "LE", "EQL", "EQR", "GE", "GT", "R", "WR")[5],
  decreasing = NA
)
}
\arguments{
\item{x}{a vector of data to search in}

\item{vec}{a scalar to search for}

\item{cmp}{one of c("WL","L","LT","LE","EQL","EQR","GE","GT","R","WR")}

\item{decreasing}{FALSE = x is ASC, TRUE = x is DESC}
}
\value{
a one length integer vector giving the found position with an attribute \code{\link{perf}} like \code{\link{rawperf}}
}
\description{
Symmetric binary search
}
\details{
finds the 'first' element from the decision border defined by cmp the search value.
There are two "EQ": "EQL" searches for the left most in case of ties, "EQR" searches for the rightmost.
Non-matches return -1 or n on the suitable side, cmp "EQL" and "EQR" return -1 for non-matches
}
\examples{
h <- seq(-3.5, 3.5, 0.5)
col <- rep(c("red","blue"), length.out=length(h))
oldpar <- par(mfcol=c(2,2))
for (cmp in c("WL","WR")){
  x <- sort(rep(-3:3, 10), decreasing=FALSE)
  n <- length(x)
  v <- sapply(h, symsearch, x, cmp)
  i <- v>=1 & v<=n
  plot(x, main=paste("ASC", cmp), ylim=range(h))
  abline(h=h[!i], col=col[!i], lty=3)
  points(v[i],h[i],col=col[i], lwd=2, pch=1, cex=2)
  y <- x[v[i]]
  segments(v[i], h[i], v[i], y, col=col[i], lwd=2)
  x <- sort(rep(-3:3, 10), decreasing=TRUE)
  v <- sapply(h, symsearch, x, cmp)
  i <- v>=1 & v<=n
  plot(x, main=paste("DESC", cmp), ylim=range(h))
  abline(h=h[!i], col=col[!i], lty=3)
  points(v[i],h[i],col=col[i], lwd=2, pch=1, cex=2)
  y <- x[v[i]]
  segments(v[i], h[i], v[i], y, col=col[i], lwd=2)
}
par(oldpar)

h <- seq(-3.5, 3.5, 0.5)
col <- rep(c("red","blue"), length.out=length(h))
oldpar <- par(mfcol=c(2,2))
for (cmp in c("L","R")){
  x <- sort(rep(-3:3, 10), decreasing=FALSE)
  n <- length(x)
  v <- sapply(h, symsearch, x, cmp)
  i <- v>=1 & v<=n
  plot(x, main=paste("ASC", cmp), ylim=range(h))
  abline(h=h[!i], col=col[!i], lty=3)
  points(v[i],h[i],col=col[i], lwd=2, pch=1, cex=2)
  y <- x[v[i]]
  segments(v[i], h[i], v[i], y, col=col[i], lwd=2)
  x <- sort(rep(-3:3, 10), decreasing=TRUE)
  v <- sapply(h, symsearch, x, cmp)
  i <- v>=1 & v<=n
  plot(x, main=paste("DESC", cmp), ylim=range(h))
  abline(h=h[!i], col=col[!i], lty=3)
  points(v[i],h[i],col=col[i], lwd=2, pch=1, cex=2)
  y <- x[v[i]]
  segments(v[i], h[i], v[i], y, col=col[i], lwd=2)
}
par(oldpar)

h <- seq(-3.5, 3.5, 0.5)
col <- rep(c("red","blue"), length.out=length(h))
oldpar <- par(mfrow=c(3,4))
for (cmp in c("LT","LE","EQL","EQR","GE","GT")){
  x <- sort(rep(-3:3, 10), decreasing=FALSE)
  v <- sapply(h, symsearch, x, cmp)
  i <- v>=1 & v<=n
  plot(x, main=paste("ASC", cmp), ylim=range(h))
  abline(h=h[!i], col=col[!i], lty=3)
  points(v[i],h[i],col=col[i], lwd=2, pch=1, cex=2)
  y <- x[v[i]]
  segments(v[i], h[i], v[i], y, col=col[i], lwd=2)
  x <- sort(rep(-3:3, 10), decreasing=TRUE)
  v <- sapply(h, symsearch, x, cmp)
  i <- v>=1 & v<=n
  plot(x, main=paste("DESC", cmp), ylim=range(h))
  abline(h=h[!i], col=col[!i], lty=3)
  points(v[i],h[i],col=col[i], lwd=2, pch=1, cex=2)
  y <- x[v[i]]
  segments(v[i], h[i], v[i], y, col=col[i], lwd=2)
}
par(oldpar)
}
