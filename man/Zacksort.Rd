% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/greeNsort.R
\name{Zacksort}
\alias{Zacksort}
\title{\Sexpr[echo=FALSE, results=rd, stage=build]{{thisalgo <- 'Zack'; greeNsort::algodb[thisalgo,'name']}}}
\usage{
Zacksort(x, situation = c("insitu", "exsitu"), method = c("index"))
}
\arguments{
\item{x}{a \code{\link{double}} vector to be sorted}

\item{situation}{"insitu" will only allocate buffer memory and use the existing RAM for sorting, "exsitu" will allocate completely fresh RAM for data and buffer}

\item{method}{an attempt to classify the implementation,  "index" means the implementation rather indexes into arrays, "pointer" rather uses pointer arithmetic}
}
\value{
like \code{\link{rawperf}}
}
\description{
\Sexpr[echo=FALSE, results=rd, stage=build]{gsub("(.*)(like )(.+)( but)(.*)","\\\\1like \\\\\\\\code{\\\\\\\\link{\\\\3} } but\\\\5",greeNsort::algodb[thisalgo,'desc'])}
}
\details{
\Sexpr[echo=FALSE, results=text, stage=build]{greeNsort::algodb[thisalgo,'expl']}

\Sexpr[echo=FALSE, results=verbatim, stage=build]{{i <- !colnames(greeNsort::algodb) \%in\% c('func','desc','expl'); cat(paste(colnames(greeNsort::algodb)[i], ' - ',  greeNsort::algodb[thisalgo,i], '\n', sep=''), sep='')}}

See \code{\link{algodb}} for the complete table of algorithms.
}
\examples{
n <- getOption("greensort_example_size")
x <- testdb$func$permut(n)
rbind(
 {y <- x[]; sperf(Zocksort(y))}
,{y <- x[]; sperf(Zacksort(y))}
,{y <- x[]; sperf(Zucksort(y))}
,{y <- x[]; sperf(Zicksort(y))}
,{y <- x[]; sperf(Quicksort2(y))}
,{y <- x[]; sperf(Quicksort3(y))}
,{y <- x[]; sperf(Tricksort(y))}
,{y <- x[]; sperf(ZacksortB(y))}
,{y <- x[]; sperf(Frogsort2(y))}
)
x <- testdb$func$tiesqrt(n)
rbind(
 {y <- x[]; sperf(Zocksort(y))}
,{y <- x[]; sperf(Zacksort(y))}
,{y <- x[]; sperf(Zucksort(y))}
,{y <- x[]; sperf(Zicksort(y))}
,{y <- x[]; sperf(Quicksort2(y))}
,{y <- x[]; sperf(Quicksort3(y))}
,{y <- x[]; sperf(Tricksort(y))}
,{y <- x[]; sperf(ZacksortB(y))}
,{y <- x[]; sperf(Frogsort2(y))}
)
x <- testdb$func$ascnorm(n)
rbind(
 {y <- x[]; sperf(Zocksort(y))}
,{y <- x[]; sperf(Zacksort(y))}
,{y <- x[]; sperf(Zucksort(y))}
,{y <- x[]; sperf(Zicksort(y))}
,{y <- x[]; sperf(Quicksort2(y))}
,{y <- x[]; sperf(Quicksort3(y))}
,{y <- x[]; sperf(Tricksort(y))}
,{y <- x[]; sperf(ZacksortB(y))}
,{y <- x[]; sperf(Frogsort2(y))}
)
}
\seealso{
\code{\link{Zocksort}} for the related asymmetric greeNsort algorithm with vulnerability
\code{\link{Zucksort}} for a variant doing zig-zag only on the branch at risk (the branch potentially containing pivot-ties)
\code{\link{Zicksort}} for a version using \code{\link{approxMedian}} pivots
\code{\link{Quicksort2}} for Hoare's original quicksort which swaps ties in order to achieve a balanced partitioning
\code{\link{Quicksort3}} for Bentley&McIlroy's algorithm that invests extra operations for isolating a (third) partition with pivot-ties for early termination.
\code{\link{Tricksort}} for a slightly improved version avoiding some redundant operations in Yaroslavskyi's 'Dual-Pivot-Quicksort' which invests extra operations for isolating a true third partition
\code{\link{ZacksortB}} for a greeNsort version tuned to avoid branch-(mis)prediction
\code{\link{Frogsort2}} for the fastest stable algorithm with O(N*log(N)) worst-case
\code{\link{UZacksort}} for a version sorting strings indirectly (not stabilized, stabilization removes ties)
}
