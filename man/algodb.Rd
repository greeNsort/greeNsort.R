% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/greeNsort.R
\docType{data}
\name{algodb}
\alias{algodb}
\title{Algorithm database}
\format{
A data frame with one row per algorithm and these columns:
\describe{
  \item{ name }{ full algorithm name }
  \item{ label }{ abbreviated algorithm label, labels of sorting Algorithms begin upper case, labels of selection algorithms begin lower case}
  \item{ major }{ single letter for major classification of the algorithms  }
  \item{ minor }{ single letter for minor classification of the algorithms  (unique within major) }
  \item{ color }{ a color to represent the algorithm }
  \item{ basic }{ the basic merge or partitioning }
  \item{ desc }{ a short description of the algorithm }
  \item{ expl }{ a longer explanation of the algorithm }
  \item{ class }{ a classification for the recursion, one of \code{S&M} Split&Merge, \code{P&P} Partition&Pool, \code{Divide&Conquer} Divide&Conquer which is neither \code{S&M} nor \code{P&P}, S&M (degenerated) Insertionsort is an extermely unbalanced special case of \code{S&M}}
  \item{ bufferclass }{ a classification of the buffer handling in the \code{S&M} recursion, one of \code{F&M} Fork&Merge (can be implemented concurrent) or Alternate&Merge \code{A&M} (only serial implementation possible)}
  \item{ task }{ the task the algorithm is performing, one of \code{select}  or \code{sort}}
  \item{ parallel }{ \code{TRUE} if algorithm is parallel, \code{FALSE} otherwise }
  \item{ varying }{ \code{TRUE} if the algorithm is implemented for elements of varying size (\code{\link{character}}) or \code{FALSE} if it is for fixed size (\code{\link{double}})}
  \item{ matrix }{ \code{TRUE} if the algorithm is implemented for sorting columns of integer matrices by keys in the first row }
  \item{ stable }{ \code{TRUE} if the algorithm is stable, \code{FALSE} otherwise}
  \item{ teststable }{ \code{TRUE} if the algorithm should be tested for stability, \code{FALSE} otherwise}
  \item{ buffer }{ some info about the buffer requirements  }
  \item{ adapt_ties }{ an attempt to classify adaptivity with regard to ties: one of 'no' (not adaptive), 'tuned' (explicitely tuned for adaptivity accepting a trade-off), 'hard' (algorithm is automaticaly adaptiv by design), 'soft' (algorithm is know to behave somewhat adaptive) }
  \item{ adapt_asc }{ an attempt to classify adaptivity with regard to presorting: one of 'no' (not adaptive), 'tuned' (explicitely tuned for adaptivity accepting a trade-off), 'hard' (algorithm is automatically adaptiv by design), 'soft' (algorithm is know to behave somewhat adaptive) }
  \item{ avoid_bm }{ an attempt to classify avoidance of branch-misprediction: one of 'no' (not avoiding), 'tuned' (explicitely tuned for avoiding accepting a trade-off), 'hard' (algorithm is automatically avoiding by design), 'soft' (algorithm is know to behave somewhat avoiding) }
  \item{ log }{ divide&conquer branching factor }
  \item{ balance }{ balance of the D&C, one of \code{balanced},  \code{skewed} or \code{random} }
  \item{ best }{ best case scaling }
  \item{ average }{average case scaling}
  \item{ worst }{worst case scaling}
  \item{ memory }{ type of memory access }
  \item{ recursion }{ type of recursion }
  \item{ symmasymm }{ type of symmetric recursion over which asymmetry }
  \item{ patent }{classification in the greeNsort patent, one of 'prior art', 'claimed', 'not claimed'}
  \item{ inventor }{name of inventor(s) where known}
  \item{ license }{licence where known}
  \item{ copyright }{copyright holder where known}
  \item{ source }{source of code, either 'greeNsort', or a different source}
  \item{ func }{the algorithm function}
  \item{ situation_exsitu }{\code{TRUE} if parameter \code{situation='exsitu'} is available, \code{FALSE} otherwise}
  \item{ situation_insitu }{\code{TRUE} if parameter \code{situation='insitu'} is available, \code{FALSE} otherwise}
  \item{ situation_default }{the default of parameter \code{situation}}
  \item{ method_pointer }{\code{TRUE} if parameter \code{method='pointer'} is available, \code{FALSE} otherwise}
  \item{ method_index }{\code{TRUE} if parameter \code{method='index'} is available, \code{FALSE} otherwise}
  \item{ method_default }{the default of parameter \code{method}}
  \item{ package }{which package, greeNsort or greeNsort.Rcpp}
  }
}
\usage{
algodb
}
\description{
A dataset describing all algorithms in this package.
}
\examples{
  \donttest{View(algodb)}
  table(algodb$class)
  table(algodb$task)
  table(algodb$varying)
  table(algodb$stable)
  unique(algodb$buffer)
  table(algodb$adapt_ties)
  table(algodb$adapt_asc)
  table(algodb$log)
  table(algodb$best)
  table(algodb$average)
  table(algodb$worst)
  table(algodb$patent)
  table(algodb$inventor)
  table(algodb$license)
  table(algodb$copyright)
  table(algodb$source)

}
\seealso{
\code{\link{testdb}} and \code{\link{vtestdb}}
}
\keyword{datasets}
