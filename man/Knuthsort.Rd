% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/greeNsort.R
\name{Knuthsort}
\alias{Knuthsort}
\title{\Sexpr[echo=FALSE, results=rd, stage=build]{{thisalgo <- 'Knuth'; greeNsort::algodb[thisalgo,'name']}}}
\usage{
Knuthsort(x, situation = c("insitu", "exsitu"), method = c("pointer", "index"))
}
\arguments{
\item{x}{a \code{\link{double}} vector to be sorted}

\item{situation}{"insitu" will only allocate buffer memory and use the existing RAM for sorting, "exsitu" will allocate completely fresh RAM for data and buffer}

\item{method}{an attempt to classify the implementation,  "index" means the implementation rather indexes into arrays, "pointer" rather uses pointer arithmetic}
}
\value{
like \code{\link{rawperf}}
}
\description{
\Sexpr[echo=FALSE, results=rd, stage=build]{gsub("(.*)(like )(.+)( but)(.*)","\\\\1like \\\\\\\\code{\\\\\\\\link{\\\\3} } but\\\\5",greeNsort::algodb[thisalgo,'desc'])}
}
\details{
\Sexpr[echo=FALSE, results=text, stage=build]{greeNsort::algodb[thisalgo,'expl']}

\Sexpr[echo=FALSE, results=verbatim, stage=build]{{i <- !colnames(greeNsort::algodb) \%in\% c('func','desc','expl'); cat(paste(colnames(greeNsort::algodb)[i], ' - ',  greeNsort::algodb[thisalgo,i], '\n', sep=''), sep='')}}

See \code{\link{algodb}} for the complete table of algorithms.
}
\examples{
n <- getOption("greensort_example_size")
x <- testdb$func$permut(n)
rbind(
 {y <- x[]; sperf(Knuthsort(y))}   # p-merging, 1 loop check
,{y <- x[]; sperf(KnuthsortA(y))}  # adaptive version
,{y <- x[]; sperf(Nocosort(y))}    # p-merging, 3 loop checks
,{y <- x[]; sperf(Bimesort(y))}    # o-merging, 1 loop check
,{y <- x[]; sperf(Katasort(y))}    # p-merging, tuned for 1/2 loop check
,{y <- x[]; sperf(Ninisort(y))}    # p-merging with only 50\\% buffer, tuned for 1/2 loop check
,{y <- x[]; sperf(Frogsort1(y))}   # a s-merging algorithm, only 50\\% buffer (one loop check)
,{y <- x[]; sperf(Knuth3sort(y))}  # p-merging, 1 loop check, log3 S&M
,{y <- x[]; sperf(Knuth4sort(y))}  # p-merging, 1 loop check, log4 S&M
)
}
\seealso{
\code{\link{Simplsort}} for a simple ping-pongalgorithm with two loop check
\code{\link{Nocosort}} for Sedgewick's ping-pong sort with three loop checks
\code{\link{Bimesort}} for Sedgewick's 'bitonic Mergesort' with one loop check
\code{\link{Katasort}} for a version with Katajainen's tuned merge (on average half check per loop traversal)
\code{\link{Ninisort}} for a version that requries only 50\% buffer (one loop check)
\code{\link{Frogsort1}} for a s-merging algorithm that reduces distance and requries only 50\% buffer (one loop check)
\code{\link{Knuth3sort}} and \code{\link{Knuth4sort}} for k-ary versions
\code{\link{KnuthsortA}} for an adaptive version
\code{\link{GKnuthsort}} for a gapped version
\code{\link{MKnuthsort}} for a version sorting matrix columns by keys in first row
\code{\link{UKnuthsort}} for a version sorting strings indirectly
\code{\link{VKnuthsort}} for a version sorting strings directly
\code{\link{PKnuthsort}} for a parallel version
}
